<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="a4a605eb-3db8-4464-9d71-b014d287c8d7" activeEnvironment="Default" name="JsonParserExample" resourceRoot="" soapui-version="5.4.0" xmlns:con="http://eviware.com/soapui/config">
  <con:settings/>
  <con:testSuite id="713130c4-fe17-4357-aa7c-61a6c68354ec" name="TestSuite">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase id="bd6781ef-52d1-4049-a61a-42d97db1b92b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep type="httprequest" name="GetResponse" id="9258bb94-6605-43bb-bfa4-9ac1faf86588">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" id="335fde18-1265-4366-9ce3-82103b191a65" name="GetResponse" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>http://localhost:8080/send_response</con:endpoint>
          <con:request/>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="ParseJson" id="9a87f9c0-48cf-40c3-bec2-137240fdd1a8">
        <con:settings/>
        <con:config>
          <script>import groovy.json.JsonSlurper

// Get the response from the GetResponse step
def response = context.expand('${GetResponse#Response}')

// Parse the response with JsonSlurper
def jsonSlurper = new JsonSlurper()
def jsonObject = jsonSlurper.parseText( response )

// Get an element from the json object
log.info jsonObject</script>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:properties/>
  </con:testSuite>
  <con:restMockService id="550b68b9-745d-41f4-9105-28bae5450f46" port="8080" path="/" host="LucianA-Lap" name="RestMockService">
    <con:settings/>
    <con:properties/>
    <con:restMockAction name="send_response" method="GET" resourcePath="/send_response" id="cdda22fa-1c96-43ab-ac09-5a7439010157">
      <con:settings/>
      <con:dispatchStyle>SEQUENCE</con:dispatchStyle>
      <con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/</con:dispatchPath>
      <con:response name="Response" id="3ec7487d-4501-44a8-830b-ab99b6c98cb5" httpResponseStatus="200" mediaType="application/json">
        <con:settings/>
        <con:responseContent>{
	"fruits" : 
		[
			"bananas",
			"jabu-ticaba",
			{
				"apples" : [ "red", "green" ]
			},
			{
				"oranges" : 
					[
						{ "clementines" : "red-clementines" },
						{ "clementines" : "orange-clementines" }, 
						{ "mandarines" : "small-mandarines" }
					]
			}
		]
}</con:responseContent>
      </con:response>
    </con:restMockAction>
  </con:restMockService>
  <con:properties/>
  <con:wssContainer/>
  <con:oAuth2ProfileContainer/>
  <con:oAuth1ProfileContainer/>
  <con:sensitiveInformation/>
</con:soapui-project>