<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="a9b0aa50-ead4-4d9a-9e36-fe2c196aa586" activeEnvironment="Default" name="ModifyXmlInGroovy" resourceRoot="" soapui-version="5.4.0" xmlns:con="http://eviware.com/soapui/config">
  <con:settings/>
  <con:testSuite id="95c801b3-6b72-4e3d-998e-4b9e9102909b" name="TestSuite">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase id="84c46807-ab13-4db1-9154-fbdf3c40057d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep type="httprequest" name="GetFirstJson" id="81d04d0c-7e0f-4960-96eb-7d32e71029d8">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" id="fb784ad3-de96-4e26-8b71-f421c8ddc2e3" name="GetFirstJson" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings/>
          <con:endpoint>http://localhost:8080/get_json1</con:endpoint>
          <con:request/>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="GetSecondJson" id="665ef0e6-60fa-4b97-b499-ef5690b66dbd">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" id="55d01866-1db4-4d03-8347-fe0824f61f1a" name="GetSecondJson" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>http://localhost:8080/get_json2</con:endpoint>
          <con:request/>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="GetThirdJson" id="60ea0b96-0cd2-4ae7-87b9-57c1a6b6ef26">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" id="a6ee4273-a3e8-424e-86d8-1343754addff" name="GetThirdJson" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings/>
          <con:endpoint>http://localhost:8080/get_json3</con:endpoint>
          <con:request/>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="CompareJsonKeys" id="6d53c937-3b8a-4f0e-bc0e-176e1c37e89b">
        <con:settings/>
        <con:config>
          <script>import groovy.json.*

// Define lists to hold all keys
def firstJsonList = [] 
def secondJsonList = []
def thirdJsonList = []

// Create a jsonSlurper object
def jsonSlurper = new JsonSlurper()

// Parse responses
def firstJson = jsonSlurper.parseText( context.expand('${GetFirstJson#Response}') )
def secondJson = jsonSlurper.parseText( context.expand('${GetSecondJson#Response}') )
def thirdJson = jsonSlurper.parseText( context.expand('${GetThirdJson#Response}') )

// Put all the keys in lists
firstJson.each {
	entry -> firstJsonList.add( "$entry.key" )
}
secondJson.each {
	entry -> secondJsonList.add( "$entry.key" )
}
thirdJson.each {
	entry -> thirdJsonList.add( "$entry.key" )	
}

// Compare the first and second list
for (int i = 0; i &lt; firstJsonList.size(); i++) {
	assert ( firstJsonList[i] == secondJsonList[i] )
}

// Compare the first and third list
for (int i = 0; i &lt; firstJsonList.size(); i++) {
	assert ( firstJsonList[i] == thirdJsonList[i] )
}</script>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:properties/>
  </con:testSuite>
  <con:restMockService id="bd8921f9-6296-4a9e-8056-56925a85005a" port="8080" path="/" host="LucianA-Lap" name="MockService">
    <con:settings/>
    <con:properties/>
    <con:restMockAction name="get_json1" method="GET" resourcePath="/get_json1" id="3b70c066-247b-4414-a5a5-77a377a67d1c">
      <con:settings/>
      <con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
      <con:dispatchStyle>SEQUENCE</con:dispatchStyle>
      <con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/</con:dispatchPath>
      <con:response name="Response" id="25783c63-e569-487c-b22e-dec5cec87e51" httpResponseStatus="200" mediaType="application/json">
        <con:settings/>
        <con:responseContent>{
	"key1" : "value1",
	"key2" : "value2",
	"key3" : "value3"
}</con:responseContent>
      </con:response>
    </con:restMockAction>
    <con:restMockAction name="get_json2" method="GET" resourcePath="/get_json2" id="84fc12d1-a4bf-4e98-8c68-35bf9412f33c">
      <con:settings/>
      <con:dispatchStyle>SEQUENCE</con:dispatchStyle>
      <con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/</con:dispatchPath>
      <con:response name="Response" id="2cc95c90-a8e9-4e17-8467-672158b88d4c" httpResponseStatus="200" mediaType="application/json">
        <con:settings/>
        <con:responseContent>{
	"key1" : "a",
	"key2" : "b",
	"key3" : "c"
}</con:responseContent>
      </con:response>
    </con:restMockAction>
    <con:restMockAction name="get_json3" method="GET" resourcePath="/get_json3" id="bcb3391f-5516-49cf-aa5b-7c7699269738">
      <con:settings/>
      <con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
      <con:dispatchStyle>SEQUENCE</con:dispatchStyle>
      <con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/</con:dispatchPath>
      <con:response name="Response" id="1de32a32-98e4-4e08-b801-efe1b32ffce6" httpResponseStatus="200" mediaType="application/json">
        <con:settings/>
        <con:responseContent>{
	"key3" : "value1",
	"key4" : "value2",
	"key2" : "value3"
}</con:responseContent>
      </con:response>
    </con:restMockAction>
  </con:restMockService>
  <con:properties/>
  <con:wssContainer/>
  <con:oAuth2ProfileContainer/>
  <con:oAuth1ProfileContainer/>
  <con:sensitiveInformation/>
</con:soapui-project>